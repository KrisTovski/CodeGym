taskKey="com.codegym.task.task28.task2810.big06"\n\nAggregator (part 6)


1. On the left in the Project panel, find "External Libraries" at the bottom. Find the examples package in jsoup, and look at the classes in this package.

2. Similar to the implementations in the jsoup examples, connect to the Linkedin URL using the GET method.
This needs to be done in the LinkedinStrategy class's getJobPostings method.
Hint: You'll get a Document object.

3. Set a breakpoint right after the connection. Run the program in debug mode.
Copy the value of document.html() into the clipboard.

4. Create a file with an html extension somewhere in the project's root.
Paste the contents of the clipboard into this file, and format it using Ctrl+Alt+L. IDEA knows how to format HTML.
Hooray! This is the page's HTML code :)

5. Implement equals/hashCode methods in the JobPosting class.
Press Alt+Enter for the equals() and hashCode() methods.


Requirements:
1.	In the LinkedinStrategy class&#39;s getJobPostings method, connect to the Linkedin URL using the GET method.
2.	Copy the page&#39;s HTML code to a file for further analysis (we won&#39;t verify that you have done this).
3.	Use the IDE to generate the equals() and hashCode() methods in the JobPosting class.


Aggregator (part 5)


1. Add a getJobPostings(String searchString) method to the interface. It will return a list of job postings.

2. Correct the errors in the LinkedinStrategy class.

3. Return to the Provider class's getJavaJobPostings method. Implement it assuming that all the data is adequate.

4. Let's try to run our program and see how it works.
In the main method, write controller.scan() instead of outputting to the screen;
Accept IDEA's suggestion and create a method.
Inside the method, go through all of the providers and collect all their job postings and add them to the list. Display the number of job postings.

5. Fix the NullPointerException (NPE) if one occurs (add a stub).



Aggregator (part 4)


Open the Linkedin website (https://www.linkedin.com/jobs/)
Type "Java San Francisco" in the search bar. At the bottom, navigate to the second page, since URLs often differ between the first and subsequent pages.
I got this URL:
https://www.linkedin.com/jobs/search?keywords=Java+San+Francisco&start=25
It follows that:
1) if you need to filter by city, then you add the name of the city after the word "Java" and separate them with a "+" sign,
2) there are 25 job postings per page.

So, a generic URL would look something like this:
https://www.linkedin.com/jobs/search?keywords=Java+ADDITIONAL_VALUE&start=PAGE_VALUE

1. Use the resulting URL to create a private String URL_FORMAT constant in LinkedinStrategy, which will be passed to String.format.
String.format(URL_FORMAT, "San+Francisco", 75) must be equal to
"https://www.linkedin.com/jobs/search?keywords=Java+San+Francisco&start=75"
To do this, copy the URL into your code and press the required key combination over it.
Ctrl+Alt+C is for creating constants,
Ctrl+Alt+M is for creating methods,
Ctrl+Alt+V is for creating variables.

2. You need to get the web page's source code programmatically. This is done with an HTTP request. You will need a Java HTML Parser.
jsoup is a good parser. Let's use it.
Find the jsoup website, and download version 1.9.2 of the library and its source files. You don't need to include them in the project!

3. Connect the new libraries:
In IDEA, open the "Project Structure" menu item (in the File menu).
On the left, select Project Settings -> Libraries. In the upper-right window, click "+".
Choose "Java" if the libraries aren't there yet, or choose "Attach Files or Directories" to add jar files to an existing library.
In the dialog box, open the folder path from item 2. Then open the folder itself and select all of the *.jar files.

4. Read additional material for this lesson in the Community.



Aggregator (part 3)


Starting in this task, you will begin writing the logic for fetching data from a website.
This logic will be contained entirely in the classes that implement Strategy.

Speaking in terms of the Strategy pattern, the provider acts as the context.
The provider must have a method that will call the strategy's method for performing the primary operation.
This method will return all of the Java job postings from the selected website.

1. In the root of the task, create a vo (value object) package and create a JobPosting class in it.
This class will store job posting data.

2. In Provider, create a List<JobPosting> getJavaJobPostings(String searchString) method. Leave the method empty for now.

3. What data is associated with a job posting?
A job title, city, company name, name of the website where the job posting was found, and a link to the job posting.
In the JobPosting class, create the corresponding String fields: title, city, companyName, websiteName, and url.

4. Create getters and setters for all of the JobPosting class's fields.

5. In the model package, create an LinkedinStrategy class that implements Strategy.
This class will implement a specific strategy for working with the Linkedin website (https://www.linkedin.com/jobs/).



Aggregator (part 2)


1. Create a Controller class which will contain business logic.

2. Add a public constructor to Controller. It should accept as many providers as are passed to it.
Save them to a private providers field.
Do you remember how to do that? You need to press Alt+Enter on the constructor's parameter, and then select "Create Field for Parameter 'providers'".

3. If no providers are passed to the controller's constructor, then throw an IllegalArgumentException.

4. Create a toString method in the Controller class (Alt+Insert -> toString()) with a standard implementation (it should display the providers field).

5. Create a provider in the main method. Then create the controller using this provider.

6. In the main method, display the Controller object on the console.



Aggregator (part 1)


It's time to work with information from the Internet a little. In this task, you'll be writing an aggregator for Java job posting.
What do we need?
There should be a list of websites we are searching for jobs.
First, we'll use https://www.linkedin.com/jobs/. We'll add other job search sites later.
These are the same site, just with different domains.

Where do we start our implementation? With the main method, of course! :)
1. Create an Aggregator class with a main method.

2. Create a model package, and create a Provider class inside it.
This class represents a generalization of how job posting data is retrieved.

3. Since the same script will be executed for each site, we'll use the Strategy pattern. Read about it online on Wikipedia.
Create a Strategy interface in the model package.
It will be responsible for fetching data from a website.

4. Add a Strategy strategy field to the Provider class. Add a constructor with this parameter and an appropriate setter.



